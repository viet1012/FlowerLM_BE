package com.example.leminhflowerBE.controller;

import com.example.leminhflowerBE.dto.BlogPostDTO;
import com.example.leminhflowerBE.response.ApiResponse;
import com.example.leminhflowerBE.service.BlogPostService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/api/blog")
@CrossOrigin(origins = "*")
public class BlogPostController {

    private final BlogPostService service;

    public BlogPostController(BlogPostService service) {
        this.service = service;
    }

    // üü¢ L·∫•y t·∫•t c·∫£ b√†i vi·∫øt
    @GetMapping
    public ResponseEntity<ApiResponse<List<BlogPostDTO>>> getAllPosts() {
        List<BlogPostDTO> posts = service.getAllPosts();
        if (posts.isEmpty()) {
            return ResponseEntity.status(HttpStatus.NO_CONTENT)
                    .body(new ApiResponse<>(true, "Kh√¥ng c√≥ b√†i vi·∫øt n√†o trong h·ªá th·ªëng.", null));
        }
        return ResponseEntity.ok(new ApiResponse<>(true, "L·∫•y danh s√°ch b√†i vi·∫øt th√†nh c√¥ng.", posts));
    }

    // üü° L·∫•y b√†i vi·∫øt theo ID
    @GetMapping("/{id}")
    public ResponseEntity<ApiResponse<BlogPostDTO>> getPostById(@PathVariable Integer id) {
        try {
            BlogPostDTO post = service.getPostById(id);
            return ResponseEntity.ok(new ApiResponse<>(true, "L·∫•y b√†i vi·∫øt th√†nh c√¥ng.", post));
        } catch (RuntimeException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(new ApiResponse<>(false, "Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt c√≥ ID = " + id, null));
        }
    }

    // üü£ L·∫•y b√†i vi·∫øt theo slug
    @GetMapping("/slug/{slug}")
    public ResponseEntity<ApiResponse<BlogPostDTO>> getPostBySlug(@PathVariable String slug) {
        try {
            BlogPostDTO post = service.getPostBySlug(slug);
            return ResponseEntity.ok(new ApiResponse<>(true, "L·∫•y b√†i vi·∫øt theo slug th√†nh c√¥ng.", post));
        } catch (RuntimeException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(new ApiResponse<>(false, "Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt v·ªõi slug = " + slug, null));
        }
    }

    // üü† T·∫°o b√†i vi·∫øt m·ªõi
    @PostMapping
    public ResponseEntity<ApiResponse<BlogPostDTO>> createPost(@RequestBody BlogPostDTO dto) {
        try {
            BlogPostDTO created = service.createPost(dto);
            return ResponseEntity.status(HttpStatus.CREATED)
                    .body(new ApiResponse<>(true, "T·∫°o b√†i vi·∫øt m·ªõi th√†nh c√¥ng.", created));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(new ApiResponse<>(false, "Kh√¥ng th·ªÉ t·∫°o b√†i vi·∫øt: " + e.getMessage(), null));
        }
    }

    // üîµ C·∫≠p nh·∫≠t b√†i vi·∫øt
    @PutMapping("/{id}")
    public ResponseEntity<ApiResponse<BlogPostDTO>> updatePost(@PathVariable Integer id, @RequestBody BlogPostDTO dto) {
        try {
            BlogPostDTO updated = service.updatePost(id, dto);
            return ResponseEntity.ok(new ApiResponse<>(true, "C·∫≠p nh·∫≠t b√†i vi·∫øt th√†nh c√¥ng.", updated));
        } catch (RuntimeException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(new ApiResponse<>(false, "Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt ƒë·ªÉ c·∫≠p nh·∫≠t (ID = " + id + ")", null));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(new ApiResponse<>(false, "L·ªói khi c·∫≠p nh·∫≠t b√†i vi·∫øt: " + e.getMessage(), null));
        }
    }

    // üî¥ X√≥a b√†i vi·∫øt
    @DeleteMapping("/{id}")
    public ResponseEntity<ApiResponse<Void>> deletePost(@PathVariable Integer id) {
        try {
            boolean deleted = service.deletePost(id);
            if (deleted) {
                return ResponseEntity.ok(new ApiResponse<>(true, "ƒê√£ x√≥a b√†i vi·∫øt c√≥ ID = " + id, null));
            } else {
                return ResponseEntity.status(HttpStatus.NOT_FOUND)
                        .body(new ApiResponse<>(false, "Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt ƒë·ªÉ x√≥a (ID = " + id + ")", null));
            }
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ApiResponse<>(false, "L·ªói khi x√≥a b√†i vi·∫øt: " + e.getMessage(), null));
        }
    }
}
