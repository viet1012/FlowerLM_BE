package com.example.leminhflowerBE.controller;

import com.example.leminhflowerBE.model.OtherServiceImage;
import com.example.leminhflowerBE.response.ApiResponse;
import com.example.leminhflowerBE.service.OtherServiceImageService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/other-service/images")
public class OtherServiceImageController {

    private final OtherServiceImageService service;

    public OtherServiceImageController(OtherServiceImageService service) {
        this.service = service;
    }

    // üü¢ L·∫•y danh s√°ch ·∫£nh theo Service ID
    @GetMapping("/{serviceId}")
    public ResponseEntity<ApiResponse<List<OtherServiceImage>>> getImages(@PathVariable Long serviceId) {
        List<OtherServiceImage> images = service.getImagesByService(serviceId);
        return ResponseEntity.ok(new ApiResponse<>(true, "L·∫•y danh s√°ch ·∫£nh th√†nh c√¥ng", images));
    }

    // üîµ Th√™m 1 ·∫£nh
    @PostMapping("/{serviceId}")
    public ResponseEntity<ApiResponse<OtherServiceImage>> addImage(
            @PathVariable Long serviceId,
            @RequestBody String imageUrl) {
        OtherServiceImage image = service.addImage(serviceId, imageUrl);
        return ResponseEntity.ok(new ApiResponse<>(true, "Th√™m ·∫£nh th√†nh c√¥ng", image));
    }

    // üîµ Th√™m nhi·ªÅu ·∫£nh
    @PostMapping("/{serviceId}/batch")
    public ResponseEntity<ApiResponse<List<OtherServiceImage>>> addImages(
            @PathVariable Long serviceId,
            @RequestBody List<String> imageUrls) {
        List<OtherServiceImage> images = service.addImages(serviceId, imageUrls);
        return ResponseEntity.ok(new ApiResponse<>(true, "Th√™m nhi·ªÅu ·∫£nh th√†nh c√¥ng", images));
    }

    // üü† C·∫≠p nh·∫≠t nhi·ªÅu ·∫£nh
    @PutMapping("/batch")
    public ResponseEntity<ApiResponse<List<OtherServiceImage>>> updateImages(
            @RequestBody List<OtherServiceImage> images) {
        List<OtherServiceImage> updated = service.updateImages(images);
        return ResponseEntity.ok(new ApiResponse<>(true, "C·∫≠p nh·∫≠t ·∫£nh th√†nh c√¥ng", updated));
    }

    // üî¥ X√≥a 1 ·∫£nh
    @DeleteMapping("/{imageId}")
    public ResponseEntity<ApiResponse<Void>> deleteImage(@PathVariable Long imageId) {
        service.deleteImage(imageId);
        return ResponseEntity.ok(new ApiResponse<>(true, "X√≥a ·∫£nh th√†nh c√¥ng", null));
    }

    // üî¥ X√≥a t·∫•t c·∫£ ·∫£nh theo service
    @DeleteMapping("/byService/{serviceId}")
    public ResponseEntity<ApiResponse<Void>> deleteAll(@PathVariable Long serviceId) {
        service.deleteAllByService(serviceId);
        return ResponseEntity.ok(new ApiResponse<>(true, "X√≥a t·∫•t c·∫£ ·∫£nh theo d·ªãch v·ª• th√†nh c√¥ng", null));
    }
}

