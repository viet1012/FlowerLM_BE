package com.example.leminhflowerBE.controller;

import com.example.leminhflowerBE.dto.FlowerGroupDTO;
import com.example.leminhflowerBE.dto.FlowerSummaryDTO;
import com.example.leminhflowerBE.model.FlowerGroup;
import com.example.leminhflowerBE.response.ApiResponse;
import com.example.leminhflowerBE.service.FlowerGroupService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/groups")
public class FlowerGroupController {

    private final FlowerGroupService service;

    public FlowerGroupController(FlowerGroupService service) {
        this.service = service;
    }

    // ‚úÖ 1Ô∏è‚É£ API random danh s√°ch hoa
    @GetMapping("/random")
    public ResponseEntity<ApiResponse<List<FlowerSummaryDTO>>> getRandomFlowers(
            @RequestParam(defaultValue = "10") int count
    ) {
        try {
            List<FlowerSummaryDTO> result = service.getRandomFlowers(count);
            return ResponseEntity.ok(new ApiResponse<>(true, "L·∫•y danh s√°ch hoa ng·∫´u nhi√™n th√†nh c√¥ng", result));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(new ApiResponse<>(false, "L·ªói khi l·∫•y hoa ng·∫´u nhi√™n: " + e.getMessage(), null));
        }
    }

    // üü¢ L·∫•y t·∫•t c·∫£ nh√≥m hoa
    @GetMapping
    public ResponseEntity<ApiResponse<List<FlowerGroupDTO>>> getAll() {
        try {
            List<FlowerGroupDTO> groups = service.getAll();
            if (groups.isEmpty()) {
                return ResponseEntity.ok(new ApiResponse<>(true, "Kh√¥ng c√≥ nh√≥m hoa n√†o trong h·ªá th·ªëng", groups));
            }
            return ResponseEntity.ok(new ApiResponse<>(true, "L·∫•y danh s√°ch nh√≥m hoa th√†nh c√¥ng", groups));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ApiResponse<>(false, "L·ªói khi l·∫•y danh s√°ch nh√≥m hoa: " + e.getMessage(), null));
        }
    }

    // üü° L·∫•y nh√≥m + t·ªïng s·ªë hoa trong nh√≥m
    @GetMapping("/group/{id}")
    public ResponseEntity<ApiResponse<Map<String, Object>>> getGroupById(@PathVariable Long id) {
        try {
            Map<String, Object> groupData = service.getGroupWithCount(id);
            return ResponseEntity.ok(new ApiResponse<>(true, "L·∫•y nh√≥m hoa th√†nh c√¥ng", groupData));
        } catch (RuntimeException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(new ApiResponse<>(false, "Kh√¥ng t√¨m th·∫•y nh√≥m hoa v·ªõi ID = " + id, null));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ApiResponse<>(false, "L·ªói khi truy v·∫•n nh√≥m hoa: " + e.getMessage(), null));
        }
    }

    // üîµ L·∫•y th√¥ng tin chi ti·∫øt nh√≥m
    @GetMapping("/{id}")
    public ResponseEntity<ApiResponse<FlowerGroupDTO>> getById(@PathVariable Long id) {
        try {
            FlowerGroupDTO dto = service.getById(id);
            return ResponseEntity.ok(new ApiResponse<>(true, "L·∫•y th√¥ng tin nh√≥m hoa th√†nh c√¥ng", dto));
        } catch (RuntimeException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(new ApiResponse<>(false, "Kh√¥ng t√¨m th·∫•y nh√≥m hoa v·ªõi ID = " + id, null));
        }
    }

    // üü¢ T·∫°o nh√≥m hoa m·ªõi
    @PostMapping
    public ResponseEntity<ApiResponse<FlowerGroupDTO>> create(@RequestBody FlowerGroup group) {
        try {
            FlowerGroupDTO created = service.create(group);
            return ResponseEntity.status(HttpStatus.CREATED)
                    .body(new ApiResponse<>(true, "T·∫°o nh√≥m hoa m·ªõi th√†nh c√¥ng", created));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(new ApiResponse<>(false, "Kh√¥ng th·ªÉ t·∫°o nh√≥m hoa: " + e.getMessage(), null));
        }
    }

    // üü† C·∫≠p nh·∫≠t nh√≥m hoa
    @PutMapping("/{id}")
    public ResponseEntity<ApiResponse<FlowerGroupDTO>> update(@PathVariable Long id, @RequestBody FlowerGroup group) {
        try {
            FlowerGroupDTO updated = service.update(id, group);
            return ResponseEntity.ok(new ApiResponse<>(true, "C·∫≠p nh·∫≠t nh√≥m hoa th√†nh c√¥ng", updated));
        } catch (RuntimeException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(new ApiResponse<>(false, "Kh√¥ng t√¨m th·∫•y nh√≥m hoa ƒë·ªÉ c·∫≠p nh·∫≠t (ID = " + id + ")", null));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(new ApiResponse<>(false, "L·ªói khi c·∫≠p nh·∫≠t nh√≥m hoa: " + e.getMessage(), null));
        }
    }
    @DeleteMapping()
    public ResponseEntity<ApiResponse<String>> deleteAll() {
        try {
            service.deleteAll();
            return ResponseEntity.ok(new ApiResponse<>(true, "ƒê√£ x√≥a nh√≥m hoa c√≥ ID = ", null));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(new ApiResponse<>(false, "Kh√¥ng th·ªÉ x√≥a nh√≥m hoa: " + e.getMessage(), null));
        }
    }
    // üî¥ X√≥a nh√≥m hoa
    @DeleteMapping("/{id}")
    public ResponseEntity<ApiResponse<String>> delete(@PathVariable Long id) {
        try {
            service.delete(id);
            return ResponseEntity.ok(new ApiResponse<>(true, "ƒê√£ x√≥a nh√≥m hoa c√≥ ID = " + id, null));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(new ApiResponse<>(false, "Kh√¥ng th·ªÉ x√≥a nh√≥m hoa: " + e.getMessage(), null));
        }
    }
}
