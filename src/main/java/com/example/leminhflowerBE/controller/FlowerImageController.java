package com.example.leminhflowerBE.controller;

import com.example.leminhflowerBE.dto.FlowerImageDTO;
import com.example.leminhflowerBE.response.ApiResponse;
import com.example.leminhflowerBE.service.FlowerImageService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/images")
public class FlowerImageController {

    private final FlowerImageService service;

    public FlowerImageController(FlowerImageService service) {
        this.service = service;
    }

    // üü¢ L·∫•y t·∫•t c·∫£ ·∫£nh hoa
    @GetMapping
    public ResponseEntity<ApiResponse<List<FlowerImageDTO>>> getAll() {
        try {
            List<FlowerImageDTO> images = service.getAll();
            return ResponseEntity.ok(new ApiResponse<>(true, "L·∫•y danh s√°ch ·∫£nh th√†nh c√¥ng", images));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ApiResponse<>(false, "L·ªói khi l·∫•y danh s√°ch ·∫£nh: " + e.getMessage(), null));
        }
    }
    // üü° L·∫•y ·∫£nh theo ID
    @GetMapping("/byFlower/{id}")
    public ResponseEntity<ApiResponse<List<FlowerImageDTO>>> getByFlowerId(@PathVariable Long id) {
        try {
            List<FlowerImageDTO> dto = service.getByFlowerId(id);
            return ResponseEntity.ok(new ApiResponse<>(true, "L·∫•y ·∫£nh th√†nh c√¥ng", dto));
        } catch (RuntimeException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(new ApiResponse<>(false, "Kh√¥ng t√¨m th·∫•y ·∫£nh v·ªõi FlowerID = " + id, null));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(new ApiResponse<>(false, "L·ªói khi l·∫•y ·∫£nh: " + e.getMessage(), null));
        }
    }
    // üü° L·∫•y ·∫£nh theo ID
    @GetMapping("/{id}")
    public ResponseEntity<ApiResponse<FlowerImageDTO>> getById(@PathVariable Long id) {
        try {
            FlowerImageDTO dto = service.getById(id);
            return ResponseEntity.ok(new ApiResponse<>(true, "L·∫•y ·∫£nh th√†nh c√¥ng", dto));
        } catch (RuntimeException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(new ApiResponse<>(false, "Kh√¥ng t√¨m th·∫•y ·∫£nh v·ªõi ID = " + id, null));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(new ApiResponse<>(false, "L·ªói khi l·∫•y ·∫£nh: " + e.getMessage(), null));
        }
    }

    // üîµ T·∫°o ·∫£nh m·ªõi
    @PostMapping
    public ResponseEntity<ApiResponse<FlowerImageDTO>> create(@RequestBody FlowerImageDTO dto) {
        try {
            FlowerImageDTO created = service.create(dto);
            return ResponseEntity.status(HttpStatus.CREATED)
                    .body(new ApiResponse<>(true, "T·∫°o ·∫£nh hoa th√†nh c√¥ng", created));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(new ApiResponse<>(false, "Kh√¥ng th·ªÉ t·∫°o ·∫£nh hoa: " + e.getMessage(), null));
        }
    }

    // üü† C·∫≠p nh·∫≠t ·∫£nh
    @PutMapping("/{id}")
    public ResponseEntity<ApiResponse<FlowerImageDTO>> update(@PathVariable Long id, @RequestBody FlowerImageDTO dto) {
        try {
            FlowerImageDTO updated = service.update(id, dto);
            return ResponseEntity.ok(new ApiResponse<>(true, "C·∫≠p nh·∫≠t ·∫£nh hoa th√†nh c√¥ng", updated));
        } catch (RuntimeException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(new ApiResponse<>(false, "Kh√¥ng t√¨m th·∫•y ·∫£nh hoa ƒë·ªÉ c·∫≠p nh·∫≠t (ID = " + id + ")", null));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(new ApiResponse<>(false, "L·ªói khi c·∫≠p nh·∫≠t ·∫£nh hoa: " + e.getMessage(), null));
        }
    }

    // üî¥ Xo√° ·∫£nh
    @DeleteMapping("/{id}")
    public ResponseEntity<ApiResponse<String>> delete(@PathVariable Long id) {
        try {
            service.delete(id);
            return ResponseEntity.ok(new ApiResponse<>(true, "ƒê√£ xo√° ·∫£nh hoa c√≥ ID = " + id, null));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(new ApiResponse<>(false, "Kh√¥ng th·ªÉ xo√° ·∫£nh hoa: " + e.getMessage(), null));
        }
    }
}
